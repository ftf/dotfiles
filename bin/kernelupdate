#!/bin/bash

# grub menu layout
## options
## title Gentoo Kernel oldversion options
## root ..
## kernel ../kernel-oldkernel
## title Gentoo Kernel currentversion options
## root ..
## kernel ../kernel-currentversion
menulst='/boot/grub/menu.lst'
newkernelpath='./arch/x86/boot/bzImage'

if [ "$(whoami)" != 'root' ]; then
  echo "You have no permission to run $0 as non-root user."
  exit 1;
fi

if [ $1 ]; then
  newkernelpath=$1;
  echo "New kernel path set to $newkernelpath via argument"
fi

if [ ! -e $menulst ]; then
  echo "$menulst is not readable"
  exit 1;
fi

if [ ! -e $newkernelpath ]; then
  echo "Cannot find a new kernel at $newkernelpath"
  exit 1;
fi

newkernel=`file $newkernelpath | /bin/grep --perl-regexp --only-matching '(?<=version )[\d\.]*'`
#echo "newkernel: $newkernel"
cp $newkernelpath /boot/kernel-$newkernel
existingkernels=(`/bin/grep --perl-regexp --only-matching '(?<=kernel-)[\d\.]*' $menulst`)
#echo "existing kernel: ${existingkernels[0]} ${existingkernels[1]}"
if [[ $newkernel == ${existingkernels[1]} ]]; then
  echo "New kernel version already configured, not going to touch $menulst"
else
  echo "Old kernels:"
  /bin/grep --perl-regexp '(title|kernel)' $menulst
  sed -i.back --expression 's/'${existingkernels[1]}'/'$newkernel'/g' --expression 's/'${existingkernels[0]}'/'${existingkernels[1]}'/g' $menulst
  echo "New kernels:" 
  /bin/grep --perl-regexp '(title|kernel)' $menulst
fi
