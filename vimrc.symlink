runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()
call pathogen#helptags()

"Forget compatibility with Vi. Who cares.
set nocompatible

" Set encoding
set encoding=utf-8

" searching
set hlsearch
set incsearch
set ignorecase
set smartcase

"Enable file types
filetype on
filetype plugin on
filetype indent on
syntax on

set ruler
set number

" set stylesheet
color kellys

" if has('gui_running')
"   color inkpot
" endif

"Enable spell checking
set spell
set spelllang=en_us,de_20
set spellfile=~/.vim/spell/spellfile.add
noremap <silent> ,s :set spell!<CR>
highlight clear SpellBad
highlight clear SpellRare
highlight clear SpellLocal
highlight clear SpellCap
highlight SpellBad   gui=undercurl cterm=underline ctermfg=red    guisp=red
highlight SpellRare  gui=undercurl cterm=underline ctermfg=red    guisp=orange
highlight SpellLocal gui=undercurl cterm=underline ctermfg=blue   guisp=blue
highlight SpellCap   gui=undercurl cterm=underline ctermfg=yellow guisp=Yellow

set showcmd
set laststatus=2

" psst
set novisualbell
set noerrorbells

" auto save on file change
set autowrite

" indent settings
set smartindent
set autoindent

" tabstop thingys
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" macvim style
"set guioptions=aAce
"set guifont=Monaco:h12

" latexbox preview in Skim with update on save
let g:LatexBox_latexmk_options = '-pvc'
let g:LatexBox_viewer = '/Applications/Skim.app/Contents/MacOS/Skim'
let g:LatexBox_output_type = "pdf"
let g:LatexBox_autojump = 1

" set leader to something
let mapleader = "\<SPACE>"

" open file in browser
nmap <leader>cr :silent ! open -a 'Google Chrome.app' %:p<cr>
nmap <leader>sf :silent ! open -a 'Safari.app' %:p<cr>

" Windows navigation
noremap <silent> ,h :wincmd h<CR>
noremap <silent> ,j :wincmd j<CR>
noremap <silent> ,k :wincmd k<CR>
noremap <silent> ,l :wincmd l<CR>

" More useful command-line completion
set wildmenu
set wildmode=list:longest
set completeopt=menu,longest

" Bubble single lines
nmap <C-Up> ddkP
nmap <C-Down> ddp
" Bubble multiple lines
vmap <C-Up> xkP`[V`]
vmap <C-Down> xp`[V`]

" Backups
set backupdir=~/.dotfiles/vimtmp/
set directory=~/.dotfiles/vimtmp/
" enable backup
set backup

" show matching brackets
set showmatch
set matchtime=7

" easier hidden buffer usage
set hidden

" textmate like hidden symbols
set listchars=tab:▸\ ,eol:¬
nmap <leader>h :set list!<CR>
set list!

" ruby things
autocmd BufNewFile,BufRead *.erb    set filetype=html.eruby
autocmd BufNewFile,BufRead *.scss   set filetype=scss.css

" add json syntax highlighting
autocmd BufNewFile,BufRead *.json set ft=javascript

" backspace fix
set backspace=indent,eol,start

" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$

" clearing highlighted search with leader q
nmap <leader>q :nohlsearch<CR>

" toggle linenumbers
nmap <leader>l :setlocal number!<CR>

" toggle paste
nmap <leader>p :set paste!<CR>

" toggle line wrapping
nmap <leader>w :setlocal wrap!<CR>:setlocal wrap?<CR>

" CtrlP
nmap ; :CtrlPBuffer<CR>
nmap <leader>o :CtrlP<CR>
let g:ctrlp_show_hidden = 1
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn|DS_Store)$'

" statusline
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" Syntastic
nmap <leader>e :Errors<CR>

" utilsnip settings
"let g:UltiSnipsExpandTrigger="<tab>" " not used because of youcompleteme
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsExpandTrigger="<c-j>"

" youcompleteme
let g:EclimCompletionMethod = 'omnifunc'
let g:ycm_collect_identifiers_from_tags_files = 1
